@article{Cunningham1992,
	author = {Cunningham, Ward},
	title = {The WyCash Portfolio Management System},
	journal = {SIGPLAN OOPS Mess.},
	issue_date = {April 1993},
	volume = {4},
	number = {2},
	month = dec,
	year = {1992},
	issn = {1055-6400},
	pages = {29--30},
	numpages = {2},
	doi = {10.1145/157710.157715},
	acmid = {157715},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{brown_managing_2010,
	address = {New York, NY, USA},
	series = {{FoSER} '10},
	title = {Managing {Technical} {Debt} in {Software}-reliant {Systems}},
	isbn = {978-1-4503-0427-6},
	doi = {10.1145/1882362.1882373},
	booktitle = {Proceedings of the {FSE}/{SDP} {Workshop} on {Future} of {Software} {Engineering} {Research}},
	publisher = {ACM},
	author = {Brown, Nanette and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert and Ozkaya, Ipek and Sangwan, Raghvinder and Seaman, Carolyn and Sullivan, Kevin and Zazworka, Nico},
	year = {2010},
	keywords = {cost-benefit analysis, design decision trade-off, large-scale system development, software metrics, technical debt, important, Medium},
	pages = {47--52},
}

@article{kruchten_technical_2012,
	title = {Technical {Debt}: {From} {Metaphor} to {Theory} and {Practice}},
	volume = {29},
	issn = {0740-7459},
	shorttitle = {Technical {Debt}},
	doi = {10.1109/MS.2012.167},
	number = {6},
	journal = {IEEE Software},
	author = {Kruchten, P. and Nord, R. L. and Ozkaya, I.},
	month = nov,
	year = {2012},
	keywords = {technical debt, read, evolvability, Investments, maintainability, refactoring, Risk management, Software maintenance, software quality, Software quality, Sofware testing},
	pages = {18--21},
}

@article{tom_exploration_2016,
	title = {An exploration of technical debt},
	volume = {86},
	journal = {Journal of Systems and Software},
	author = {Tom, Edith and Aurum, Ayb√ºke and Vidgen, Richard},
	year = {2016},
	keywords = {High},
	pages = {1498--1516},
}

@article{li_systematic_2015,
	title = {A systematic mapping study on technical debt and its management},
	volume = {101},
	issn = {0164-1212},
	doi = {10.1016/j.jss.2014.12.027},
	journal = {Journal of Systems and Software},
	author = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
	month = mar,
	year = {2015},
	keywords = {Technical debt, Systematic mapping study, Technical debt management, High},
	pages = {193--220},
}

@article{ampatzoglou_financial_2015,
	title = {The financial aspect of managing technical debt: {A} systematic literature review},
	volume = {64},
	issn = {0950-5849},
	shorttitle = {The financial aspect of managing technical debt},
	doi = {10.1016/j.infsof.2015.04.001},
	journal = {Information and Software Technology},
	author = {Ampatzoglou, Areti and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris},
	month = aug,
	year = {2015},
	keywords = {Technical debt, Financial debt, Financial terms, Systematic literature review, High},
	pages = {52--73},
}


@misc{mcconnell_categorizing_2012,
	type = {Blog},
	title = {On {Categorizing} \& {Managing Technical Debt}},
	journal = {http://www.ontechnicaldebt.com},
	author = {McConnell, Steve},
	month = jul,
	year = {2012},
	howpublished = {\url{http://www.ontechnicaldebt.com/blog/steve-mcconnell-on-categorizing-managing-technical-debt/}},
	note = {Accessed: 04-04-2018}
}

@misc{ries_embradetd_2009,
	title = {Embrace {Technical Debt}},
	type = {Blog},
	author = {Ries, Eric},
	howpublished = {\url{http://www.startuplessonslearned.com/2009/07/embrace-technical-debt.html}},
	month = jul,
	year = {2009},
	note = {Accessed: 04-04-2018}
}

@misc{fowler_tdquadrant_2014,
	type = {Blog},
	title = {{Technical Debt Quadrant}},
	author = {Fowler, Martin},
	month = Oct,
	year = {2014},
	howpublished = {\url{https://martinfowler.com/bliki/TechnicalDebtQuadrant.html}},
	note = {Accessed: 13-09-2018}
}

@inproceedings{ernst_requirements_2012,
	author = {Ernst, Neil A.},
	title = {On the Role of Requirements in Understanding and Managing Technical Debt},
	booktitle = {Proceedings of the Third International Workshop on Managing Technical Debt},
	series = {MTD '12},
	year = {2012},
	isbn = {978-1-4673-1749-8},
	location = {Zurich, Switzerland},
	pages = {61--64},
	numpages = {4},
	acmid = {2666047},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
}

@misc{elm2009design,
	title={{Design Debt Economics: A Vocabulary for Describing the Causes, Costs and Cures for Software Maintainability Problems.}},
	author={Elm, J},
	publisher={{IBM}},
	year={2009},
}

@article{rooney2010technical,
	title={Technical debt: Challenging the metaphor},
	author={Rooney, David},
	journal={Cutter IT Journal},
	volume={23},
	number={10},
	pages={16},
	year={2010}
}

@inproceedings{schmid_limitstd_2013,
	author = {Schmid, Klaus},
	title = {On the Limits of the Technical Debt Metaphor: Some Guidance on Going Beyond},
	booktitle = {Proceedings of the 4th International Workshop on Managing Technical Debt},
	series = {MTD '13},
	year = {2013},
	isbn = {978-1-4673-6443-0},
	location = {San Francisco, California},
	pages = {63--66},
	numpages = {4},
	acmid = {2663308},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
	keywords = {economic model, metaphor, software architecture, technical debt},
}

@article{allman_tdm_2012,
	author = {Allman, Eric},
	title = {Managing Technical Debt},
	journal = {Queue},
	issue_date = {March 2012},
	volume = {10},
	number = {3},
	month = mar,
	year = {2012},
	issn = {1542-7730},
	pages = {10:10--10:17},
	articleno = {10},
	numpages = {8},
	doi = {10.1145/2168796.2168798},
	acmid = {2168798},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{Li2014,
author = {Li, Zengyang and Liang, Peng and Avgeriou, Paris and Guelfi, Nicolas and Ampatzoglou, Apostolos},
booktitle = {Proceedings of the 10th international ACM Sigsoft conference on Quality of software architectures - QoSA '14},
doi = {10.1145/2602576.2602581},
isbn = {9781450325769},
keywords = {architectural technical debt,commit,modularity metric,software},
mendeley-groups = {Technical Debt},
pages = {119--128},
title = {{An empirical investigation of modularity metrics for indicating architectural technical debt}},
url = {http://dl.acm.org/citation.cfm?doid=2602576.2602581},
year = {2014}
}

@inproceedings{Garcia2009,
author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Neand},
booktitle = {Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
doi = {10.1109/CSMR.2009.59},
isbn = {9780769535890},
issn = {15345351},
keywords = {Archi,Software Architecture,Software Maintenance},
mendeley-groups = {Bad Smells},
pages = {255--258},
title = {{Identifying Architectural Bad Smells}},
year = {2009}
}

@inproceedings{Verdecchia2018,
author = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
booktitle = {2018 ACM/IEEE International Conference on Technical Debt},
doi = {10.1145/3194164.3194176},
isbn = {9781450357135},
keywords = {Software architecture,Systematic mapping study,Technical debt},
mendeley-groups = {Technical Debt},
title = {{Architectural Technical Debt Identification: the Research Landscape}},
url = {http://www.ivanomalavolta.com/files/papers/TechDebt{\_}2018.pdf},
year = {2018}
}

@incollection{Beck1999,
author = {Beck, Kent and Fowler, Martin and Booch, Grady and Jacobson, Ivar and Rumbaugh, James},
booktitle = {Refactoring: improving the design of existing code},
chapter = {3},
edition = {1},
isbn = {1435-9456 (Electronic) 1435-9448 (Linking)},
issn = {14359448},
mendeley-groups = {Bad Smells},
pages = {75--88},
publisher = {Addison-Wesley Professional},
title = {{Bad Smells in Code}},
year = {1999}
}

@inproceedings{Macia2012,
author = {Macia, Isela and Garcia, Joshua and Popescu, Daniel and Garcia, Alessandro and Medvidovic, Nenad and von Staa, Arndt},
booktitle = {Proceedings of the 11th annual international conference on Aspect-oriented Software Development - AOSD '12},
doi = {10.1145/2162049.2162069},
isbn = {9781450310925},
keywords = {architectural anomalies,architectural degradation symptoms,architectural violations,code anomalies},
pages = {167},
title = {{Are automatically-detected code anomalies relevant to architectural modularity?}},
url = {http://dl.acm.org/citation.cfm?doid=2162049.2162069},
year = {2012}
}

@inproceedings{Fontana2015,
author = {Fontana, Francesca Arcelli and Ferme, Vincenzo and Zanoni, Marco},
booktitle = {Proceedings - 2nd International Workshop on Software Architecture and Metrics, SAM 2015},
doi = {10.1109/SAM.2015.8},
isbn = {9781479919345},
mendeley-groups = {Bad Smells},
pages = {1--7},
title = {{Towards Assessing Software Architecture Quality by Exploiting Code Smell Relations}},
year = {2015}
}

@article{Mo2015,
author = {Mo, Ran and Cai, Yuanfang and Kazman, Rick and Xiao, Lu},
doi = {10.1109/WICSA.2015.12},
isbn = {9781479919222},
journal = {Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015},
keywords = {Software Architecture,Software Quality,Software maintenance},
pages = {51--60},
title = {{Hotspot Patterns: The Formal Definition and Automatic Detection of Architecture Smells}},
year = {2015}
}

@article{Khomh2012,
author = {Khomh, Foutse and Penta, Massimiliano Di and Gu{\'{e}}h{\'{e}}neuc, Yann Ga{\"{e}}l and Antoniol, Giuliano},
doi = {10.1007/s10664-011-9171-y},
isbn = {1382-3256},
issn = {13823256},
journal = {Empirical Software Engineering},
keywords = {Antipatterns,Empirical software engineering,Mining software repositories},
mendeley-groups = {Bad Smells},
title = {{An exploratory study of the impact of antipatterns on class change- and fault-proneness}},
year = {2012}
}

@article{Brown1998,
author = {Brown, William J and Malveau, Raphael C and Mowbray, Thomas J and Wiley, John},
isbn = {0849329949},
issn = {0849329949},
journal = {Crisis},
mendeley-groups = {Bad Smells},
pmid = {4491024},
title = {{AntiPatterns: Refactoring Software , Architectures, and Projects in Crisis}},
year = {1998}
}

@incollection{VanSolingen2002,
author = {van Solingen, Rini and Basili, Vic and Caldiera, Gianluigi and Rombach, H. Dieter},
booktitle = {Encyclopedia of Software Engineering},
doi = {10.1002/0471028959.sof142},
isbn = {9780471377375},
issn = {{\textless}null{\textgreater}},
mendeley-groups = {Research Methodology},
title = {{Goal Question Metric (GQM) Approach}},
year = {2002}
}

@article{Roveda,
author = {Roveda, Riccardo and {Arcelli Fontana}, Francesca and Pigazzini, Ilaria and Zanoni, Marco},
mendeley-groups = {Technical Debt,Bad Smells},
year={2018},
title = {{Towards an Architectural Debt Index}}
}

@article{Fontana2017,
author = {Fontana, Francesca Arcelli and Pigazzini, Ilaria and Roveda, Riccardo and Tamburri, Damian and Zanoni, Marco and Nitto, Elisabetta Di},
doi = {10.1109/ICSAW.2017.16},
isbn = {9781509047932},
journal = {Proceedings - 2017 IEEE International Conference on Software Architecture Workshops, ICSAW 2017: Side Track Proceedings},
keywords = {Architectural Smells,Dependency graph,Graph database,Software architecture},
mendeley-groups = {Bad Smells,My papers/Intro essay},
pages = {282--285},
title = {{Arcan: A tool for architectural smells detection}},
year = {2017}
}

@article{Robillard2010,
author = {Robillard, Martin and Walker, Robert and Zimmermann, Thomas},
doi = {10.1109/MS.2009.161},
file = {:home/p284098/Documents/05235134.pdf:pdf},
isbn = {9789380544007},
issn = {07407459},
journal = {IEEE Software},
keywords = {Coding tools and techniques,Design tools and techniques,Development tools,Programming environments,Software construction tools,Software engineering},
mendeley-groups = {My papers/Intro essay},
month = {jul},
number = {4},
pages = {80--86},
title = {{Recommendation systems for software engineering}},
url = {http://ieeexplore.ieee.org/document/5235134/},
volume = {27},
year = {2010}
}

@article{Fontana2016,
abstract = {In software maintenance and evolution, it is important to assess both code and architecture in order to identify issues to be solved to improve software quality. Different tools provide some kind of index giving us an overall evaluation of a project to be used when managing its technical debt. In this paper, we outline how the indexes, that we call in general Technical Debt Indexes, provided by five different tools are computed. We describe their principal features and differences, what aspects they are missing, and we outline if (and how) the indexes take into account architectural problems that could have a major impact on the architectural debt. We show that the indexes rely on different information sources and measure different quantities.},
author = {Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
doi = {10.1109/MTD.2016.11},
isbn = {9781509038541},
journal = {Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016},
keywords = {Architectural Debt,Software Quality Analysis Tools,Technical Debt Indexes},
mendeley-groups = {Technical Debt},
pages = {28--31},
title = {{Technical Debt Indexes Provided by Tools: A Preliminary Discussion}},
year = {2016}
}

@inproceedings{Ernst2015,
abstract = {The technical debt metaphor is widely used to encapsulate numerous software quality problems. The metaphor is attractive to practitioners as it communicates to both technical and nontechnical audiences that if quality problems are not addressed, things may get worse. However, it is unclear whether there are practices that move this metaphor beyond a mere communication mechanism. Existing studies of technical debt have largely focused on code metrics and small surveys of developers. In this paper, we report on our survey of 1,831 participants, primarily software engineers and architects working in long-lived, software-intensive projects from three large organizations, and follow-up interviews of seven software engineers. We analyzed our data using both nonparametric statistics and qualitative text analysis. We found that architectural decisions are the most important source of technical debt. Furthermore, while respondents believe the metaphor is itself important for communication, existing tools are not currently helpful in managing the details. We use our results to motivate a technical debt timeline to focus management and tooling approaches.},
address = {New York, New York, USA},
author = {Ernst, Neil A. and Bellomo, Stephany and Ozkaya, Ipek and Nord, Robert L. and Gorton, Ian},
booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering - ESEC/FSE 2015},
doi = {10.1145/2786805.2786848},
file = {:C$\backslash$:/Users/p284098/Zotero/storage/BLG2F3YH/Ernst et al. - 2015 - Measure It Manage It Ignore It Software Practit.pdf:pdf},
isbn = {9781450336758},
keywords = {Technical debt,architecture,survey},
mendeley-groups = {Technical Debt},
pages = {50--60},
publisher = {ACM Press},
title = {{Measure it? Manage it? Ignore it? software practitioners and technical debt}},
url = {http://dl.acm.org/citation.cfm?id=2786805.2786848},
year = {2015}
}

@article{Wu2018,
abstract = {In this paper, we present our 4-year experience of creating, evolving, and validating an automated software architecture measurement system within Huawei. This system is centered around a comprehensive scale called the Standard Architecture Index (SAI), which is composed of a number of measures, each reflecting a recurring architecture problem. Development teams use this as a guide to figure out how to achieve a better score by addressing the underlying problems. The measurement practice thus motivates desired behaviors and outcomes. In this paper, we present our experience of creating and validating SAI 1.0 and 2.0, which has been adopted as the enterprise-wide standard, and our directions towards SAI 3.0. We will describe how we got the development teams to accept and apply SAI through pilot studies, constantly adjusting the formula based on feedback, and correlating SAI scores with productivity measures. Our experience shows that it is critical to guide development teams to focus on the underlying problems behind each measure within SAI, rather than on the score itself. It is also critical to introduce state-of-the-art technologies to the development teams. In doing so they can leverage these technologies to pinpoint and quantify architecture problems so that better SAI scores can be achieved, along with better quality and productivity.},
author = {Wu, Wensheng and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Liu, Zhipeng and Ge, Yingan and Liu, Weicai and Zhang, Junhui},
journal = {Ecsa},
keywords = {software architecture,software measurement,software quality},
title = {{Software Architecture Measurement - Experiences from a Multinational Company}},
year = {2018}
}

@article{Xiao2014,
abstract = {In this tool demo, we will illustrate our tool---Titan---that supports a new architecture model: design rule spaces (DRSpaces). We will show how Titan can capture both architecture and evolutionary structure and help to bridge the gap between architecture and defect prediction. We will demo how to use our toolset to capture hundreds of buggy files into just a few architecturally related groups, and to reveal architecture issues that contribute to the error-proneness and change-proneness of these groups. Our tool has been used to analyze dozens of large-scale industrial projects, and has demonstrated its ability to provide valuable direction on which parts of the architecture are problematic, and on why, when, and how to refactor. The video demo of Titan can be found at https://art.cs.drexel.edu/{\~{}}lx52/titan.mp4},
author = {Xiao, Lu and Cai, Yuanfang and Kazman, Rick},
doi = {10.1145/2635868.2661677},
isbn = {978-1-4503-3056-5},
issn = {9781450330565},
journal = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
keywords = {Software Architecture,Software Quality,Software maintenance},
title = {{Titan: A Toolset That Connects Software Architecture with Quality Analysis}},
year = {2014}
}

@book{Wieringa2014,
abstract = {Abstract Design scientists have to balance the demands of methodological rigor that they share with purely curiosity-driven scientists, with the demands of practical utility that they share with utility-driven engineers. Balancing these conflicting demands can be ... $\backslash$n},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Wieringa, Roel J.},
booktitle = {Design Science Methodology: For Information Systems and Software Engineering},
doi = {10.1007/978-3-662-43839-8},
eprint = {arXiv:1011.1669v3},
isbn = {9783662438398},
issn = {0270-5257},
mendeley-groups = {Research Methodology,Books},
pmid = {21542865},
title = {{Design science methodology: For information systems and software engineering}},
year = {2014}
}

@article{Martin1996a,
abstract = {This paper describes a set of metrics that can be used to measure the quality of an object-oriented design in terms of the interdependence between the subsystems of that design. Designs which are highly interdependent tend to be rigid, unreusable and hard to maintain. Yet interdependence is necessary if the subsystems of the design are to collaborate. Thus, some forms of dependency must be desirable, and other forms must be undesirable. This paper proposes a design pattern in which all the dependencies are of the desirable form. Finally, this paper describes a set of metrics that measure the conformance of a design to the desirable pattern.},
author = {Martin, Robert},
doi = {10.1080/08982119608904663},
file = {:home/p284098/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Martin - 1996 - OO Design Quality Metrics.pdf:pdf},
isbn = {0135974445},
issn = {0898-2112},
journal = {Quality Engineering},
mendeley-groups = {Software Metrics,My work/Intro essay},
number = {4},
pages = {537--542},
title = {{OO Design Quality Metrics}},
volume = {8},
year = {1996}
}

@incollection{Martini2018,
abstract = {Architectural technical debt can have a huge impact on software maintainability and evolution. Hence, different architectural violations , detected as architectural smells, need to be identified and refac-tored. In this paper, we conducted a multiple case-study on several architectural smells detected in four industrial projects. We conducted an in-depth investigation with a questionnaire, interviews and thorough inspection of the code with the practitioners. We evaluated the negative impact of the technical debt detected by the architectural smells, their difficulty to be refactored and the usefulness of the detection tool. The results show that practitioners appreciated the help of automatic detection , and that they prioritize refactoring architectural debt that causes more negative impact despite the higher refactoring effort.},
author = {Martini, Antonio and Fontana, Francesca Arcelli and Biaggi, Andrea and Roveda, Riccardo},
doi = {10.1007/978-3-030-00761-4_21},
file = {:home/p284098/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Martini et al. - 2018 - Identifying and Prioritizing Architectural Debt Through Architectural Smells A Case Study in a Large Software Co.pdf:pdf},
isbn = {978-3-8348-1953-6},
mendeley-groups = {Bad Smells/Empirical studies,Bad Smells},
month = {sep},
pages = {320--335},
publisher = {Springer, Cham},
title = {{Identifying and Prioritizing Architectural Debt Through Architectural Smells: A Case Study in a Large Software Company}},
url = {http://link.springer.com/10.1007/978-3-030-00761-4{\_}21},
year = {2018}
}

@article{Avgeriou2016,
author = {Avgeriou, Paris and Kruchten, Philippe and Ozkaya, Ipek and Seaman, Carolyn},
doi = {10.4230/DagRep.6.4.110},
file = {:home/p284098/Downloads/dagrep{\_}v006{\_}i004{\_}p110{\_}s16162.pdf:pdf},
isbn = {978-0-08-043624-1},
issn = {2192-5283},
journal = {Dagstuhl Reports},
keywords = {coding tools and techniques,design tools and techniques,management,metrics,software engineering},
mendeley-groups = {Technical Debt},
number = {4},
pages = {110--138},
publisher = {Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik},
title = {{Managing Technical Debt in Software Engineering (Dagstuhl Seminar 16162)}},
url = {http://drops.dagstuhl.de/opus/volltexte/2016/6693/ http://drops.dagstuhl.de/opus/volltexte/2016/6693},
volume = {6},
year = {2016}
}

@inproceedings{Vidal2016,
author = {Vidal, Santiago and Guimaraes, Everton and Oizumi, Willian and Garcia, Alessandro and Pace, Andr{\'{e}}s D{\'{i}}az and Marcos, Claudia},
booktitle = {Proceedings - 2016 10th Brazilian Symposium on Components, Architectures and Reuse Software, SBCARS 2016},
doi = {10.1109/SBCARS.2016.11},
isbn = {9781509050864},
keywords = {Agglomerations,Architectural problems,Code smells,Software evolution},
mendeley-groups = {Bad Smells/Empirical studies,Bad Smells/To read},
month = {sep},
pages = {41--50},
publisher = {IEEE},
title = {{Identifying architectural problems through prioritization of code smells}},
url = {http://ieeexplore.ieee.org/document/7789838/},
year = {2016}
}

@techreport{Verdecchia,
author = {Verdecchia, Roberto and Lago, Patricia and Malavolta, Ivano and Ozkaya, Ipek},
file = {:home/fenn/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Verdecchia et al. - Unknown - ATDx Building an Architectural Technical Debt Index.pdf:pdf},
keywords = {Software Analytics,Software Architecture,Software Maintenance,Software Metrics,Technical Debt},
mendeley-groups = {Technical Debt/TD Indexes {\&} Principal estimation},
title = {{ATDx: Building an Architectural Technical Debt Index}},
url = {https://www.castsoftware.com/}
}

@article{Trubiani2014,
address = {New York, New York, USA},
author = {Trubiani, Catia and {Di Marco}, A.a and Cortellessa, V.a and Mani, N.b and Petriu, D.b},
doi = {10.1145/2568088.2568092},
file = {:home/fenn/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Trubiani et al. - 2014 - Exploring synergies between bottleneck analysis and performance antipatterns.pdf:pdf},
isbn = {9781450327336},
journal = {ICPE 2014 - Proceedings of the 5th ACM/SPEC International Conference on Performance Engineering},
keywords = {bottleneck analysis,model-based performance analysis,performance antipatterns,performance feedback,software,software performance},
mendeley-groups = {Bad Smells,Trade-offs,Bad Smells/Empirical studies},
pages = {75--86},
publisher = {ACM Press},
title = {{Exploring synergies between bottleneck analysis and performance antipatterns}},
url = {http://dl.acm.org/citation.cfm?doid=2568088.2568092 http://www.scopus.com/inward/record.url?eid=2-s2.0-84899695473{\&}partnerID=40{\&}md5=47b94c750b3b8a95c1cffb3cc9bfe4f0},
year = {2014}
}

@article{Barney2012,
author = {Barney, Sebastian and Petersen, Kai and Svahnberg, Mikael and Aurum, Ayb{\"{u}}ke and Barney, Hamish},
doi = {10.1016/j.infsof.2012.01.008},
file = {:home/fenn/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Barney et al. - 2012 - Software quality trade-offs A systematic map.pdf:pdf},
isbn = {0950-5849},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Software engineering,Software quality,Trade-off approaches},
mendeley-groups = {My work,My work/Trade-offs ES,Trade-offs,Literature reviews and Mapping studies},
month = {jul},
number = {7},
pages = {651--662},
publisher = {Elsevier B.V.},
title = {{Software quality trade-offs: A systematic map}},
url = {http://dx.doi.org/10.1016/j.infsof.2012.01.008 http://linkinghub.elsevier.com/retrieve/pii/S0950584912000195},
volume = {54},
year = {2012}
}

@inproceedings{Verdecchia2018a,
author = {Verdecchia, Roberto and {Aparicio Saez}, Ren{\'{e}} and Procaccianti, Giuseppe and Lago, Patricia},
booktitle = {ICT4S2018. 5th International Conference on Information and Communication Technology for Sustainability ICT4S2018. 5th International Conference on Information and Communication Technology for Sustainability},
doi = {10.29007/dz83},
file = {:home/fenn/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Verdecchia et al. - 2018 - Empirical Evaluation of the Energy Impact of Refactoring Code Smells.pdf:pdf},
mendeley-groups = {Refactoring impact/On Runtime,Refactoring impact,Bad Smells/Empirical studies},
pages = {365--345},
title = {{Empirical Evaluation of the Energy Impact of Refactoring Code Smells}},
url = {https://easychair.org/publications/paper/MxpT},
volume = {52},
year = {2018}
}

@inproceedings{Dhaka2017,
author = {Dhaka, Garima and Singh, Paramvir},
booktitle = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
doi = {10.1109/APSEC.2016.057},
file = {:home/fenn/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dhaka, Singh - 2017 - An empirical investigation into code smell elimination sequences for energy efficient software.pdf:pdf},
isbn = {9781509055753},
issn = {15301362},
keywords = {Code smell,Energy consumption,Green IT,Maintainability,Refactoring,Software architecture,Sustainability},
mendeley-groups = {Refactoring impact/On Runtime,Refactoring impact},
pages = {349--352},
publisher = {IEEE},
title = {{An empirical investigation into code smell elimination sequences for energy efficient software}},
url = {http://ieeexplore.ieee.org/document/7890609/},
year = {2017}
}
